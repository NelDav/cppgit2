PROJECT(cppgit2)
CMAKE_MINIMUM_REQUIRED(VERSION 3.8)

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Add libgit2
ADD_SUBDIRECTORY(ext/libgit2 ${CMAKE_BINARY_DIR}/lib)

INCLUDE(CMakePackageConfigHelpers)

# Sources for cppgit2
FILE(GLOB CPPGIT2_SOURCES
  "src/*.cpp"
  )

# Version information
SET(CPPGIT2_VERSION_MAJOR 0)
SET(CPPGIT2_VERSION_MINOR 1)
SET(CPPGIT2_VERSION_REV 0)
SET(CPPGIT2_VERSION_STRING "${CPPGIT2_VERSION_MAJOR}.${CPPGIT2_VERSION_MINOR}.${CPPGIT2_VERSION_REV}")

# Build object library
ADD_LIBRARY(CPPGIT2_OBJECT_LIBRARY OBJECT ${CPPGIT2_SOURCES})
INCLUDE_DIRECTORIES("include" "ext/libgit2/include")
SET_PROPERTY(TARGET CPPGIT2_OBJECT_LIBRARY PROPERTY CXX_STANDARD 11)

# Shared libraries need PIC
SET_PROPERTY(TARGET CPPGIT2_OBJECT_LIBRARY PROPERTY POSITION_INDEPENDENT_CODE 1)

# Build shared library
add_library(CPPGIT2_SHARED SHARED $<TARGET_OBJECTS:CPPGIT2_OBJECT_LIBRARY>)
SET_TARGET_PROPERTIES(CPPGIT2_SHARED PROPERTIES OUTPUT_NAME cppgit2)
SET_TARGET_PROPERTIES(CPPGIT2_SHARED PROPERTIES VERSION ${CPPGIT2_VERSION_STRING}
                      SOVERSION ${CPPGIT2_VERSION_MINOR})
TARGET_LINK_LIBRARIES(CPPGIT2_SHARED git2)

# Build static library
add_library(CPPGIT2_STATIC STATIC $<TARGET_OBJECTS:CPPGIT2_OBJECT_LIBRARY>)
SET_TARGET_PROPERTIES(CPPGIT2_STATIC PROPERTIES OUTPUT_NAME cppgit2.static)
TARGET_LINK_LIBRARIES(CPPGIT2_STATIC git2)

# Copy include directories to build/include
FILE(COPY "include" DESTINATION "${CMAKE_BINARY_DIR}/.")
FILE(COPY "ext/libgit2/include" DESTINATION "${CMAKE_BINARY_DIR}/.")

# Build samples
FILE(GLOB SAMPLES "samples/*.cpp")
FOREACH(SAMPLE ${SAMPLES})
  GET_FILENAME_COMPONENT(SAMPLE_EXE ${SAMPLE} NAME_WE)
  ADD_EXECUTABLE(${SAMPLE_EXE} ${SAMPLE})
  SET_TARGET_PROPERTIES(${SAMPLE_EXE} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/samples")
  TARGET_LINK_LIBRARIES(${SAMPLE_EXE} CPPGIT2_SHARED)
  SET_PROPERTY(TARGET ${SAMPLE_EXE} PROPERTY CXX_STANDARD 11)
ENDFOREACH()
